<?php
/**
 * @file
 * Code for the DFS WEM Personalize feature.
 */

include_once 'dfs_wem_personalize.features.inc';

/**
 * Implements hook_df_pre_import().
 */
function dfs_wem_personalize_df_pre_import() {
  return array(
    array('_dfs_wem_personalize_set_reference_queue', array()),
  );
}
/**
 * Helper function to set the global variable for tracking imports.
 */
function _dfs_wem_personalize_set_reference_queue() {
  $_SESSION['wem-reference-queue'] = array();
}

/**
 * Implements hook_entity_insert().
 */
function dfs_wem_personalize_entity_insert($entity, $type) {

  // Set up new bean data with empty reference field.
  $data = array(
    'label' => 'WEM - Personalized Content',
    'description' => NULL,
    'title' => 'Nexus Contest',
    'type' => 'df_engage_block',
    'data' => array(
      'view_mode' => 'default',
    ),
    'delta' => 'wem---personalized-content',
    'view_mode' => 'default',
    'created' => 1403109793,
    'log' => '',
    'uid' => 1,
    'default_revision' => 1,
    'revisions' => array(),
    'vuuid' => '7390e524-cbe8-412c-95d1-6c9c58f83439',
    'uuid' => '5c35e68a-c593-4f50-937c-880910d83c78',
    'field_content_reference' => array('und' => array()),
  );

  // List the UUIDs for our desired referenced content.
  $content_uuids = array(
    '766cba85-2213-444c-a9c2-c7dd890142v7',
    '088bff85-6697-4a6a-bfe9-c7fa326282c8',
    'd4963a0f-75e3-44ba-9bd4-2c6b1cfaf676',
  );

  // Add the inserted content to the reference queue if its a match.
  if ($type == 'node' && in_array($entity->uuid, $content_uuids)) {
    $_SESSION['wem-reference-queue'][] = array('target_id' => $entity->nid);
    // Once all content is stored in the queue, add to the bean data.
    if (count($_SESSION['wem-reference-queue']) === count($content_uuids)) {
      $data['field_content_reference']['und'] = $_SESSION['wem-reference-queue'];
      // Check if bean already exists.
      $existing = entity_get_id_by_uuid('bean', array($data['uuid']));
      if (!empty($existing)) {
        // Load existing bean and re-key the values.
        $bean = entity_load_single('bean', $existing[$data['uuid']]);
        foreach ($data as $key => $value) {
          $bean->$key = $value;
        }
      }
      else {
        // Create a new bean.
        $bean = entity_create('bean', $data);
      }
      // Save the bean.
      if ($bean->save()) {
        // Tell us all about it.
        drupal_set_message(t('@label bean saved.', array('@label' => $bean->label)), 'status');
      }
      // Clear the queue for potential reuse.
      unset($_SESSION['wem-reference-queue']);
      $_SESSION['wem-reference-queue'] = array();
    }
  }

  // After our Bean is saved we can follow up with a Personalize option set.
  if ($type == 'bean' && $entity->type == 'df_engage_block' && $entity->uuid == '5c35e68a-c593-4f50-937c-880910d83c78') {
    $bid = $entity->bid;
    // Mock option set data.
    $option_set = array(
      'plugin' => 'fields',
      'agent' => 'wem-campaign',
      'is_new' => TRUE,
      'mvt' => NULL,
      'options' => array(
        0 => array('option_label' => 'Option A', 'option_id' => 'option-a'),
        1 => array('option_label' => 'Option B', 'option_id' => 'option-b'),
        2 => array('option_label' => 'Option C', 'option_id' => 'option-c'),
      ),
      'winner' => NULL,
      'stateful' => 0,
      'data' => array(
        'personalize_fields_entity_type' => 'bean',
        'personalize_fields_entity_id' => $bid,
        'personalize_fields_field_name' => 'field_content_reference'
      ),
      'preview_link' => NULL,
      'rdf_mapping' => array(),
    );
    // Create the option set object.
    $option_set = (object) $option_set;
    // Save the option set.
    personalize_fields_option_set_save($option_set, $type, $entity, 'field_content_reference');
  }
}

