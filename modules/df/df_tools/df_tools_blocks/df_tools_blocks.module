<?php

/**
 * @file
 * Contains df_tools_blocks.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_help().
 */
function df_tools_blocks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the df_tools_hero module.
    case 'help.page.df_tools_blocks':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide a base set of Custom Block types for Demo Framework.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_block().
 */
function df_tools_blocks_preprocess_block(&$variables) {
  if (isset($variables['content']) && isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->bundle() == 'hero') {
      $wrapper = array(
        '#prefix' =>'<div class="full-width-inner">',
        '#suffix' =>'</div>',
        '#type' => 'container',
        '#weight' => -1,
        '#attributes' => array(
        'class' => array('hero-block-fields row align-center')
        ),
        '#children' => array()
      );
      foreach (Element::getVisibleChildren($variables['content']) as $field_name) {
        if ($field_name != 'field_hero_image') {
          $wrapper['#children'][] = $variables['content'][$field_name];
          unset($variables['content'][$field_name]);
        }
      }
      $variables['content']['wrapper'] = $wrapper;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function df_tools_blocks_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add block--block-content--bundle.html.twig suggestions
  if (isset($variables['elements']['content']) && isset($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $entity */
    $entity = $variables['elements']['content']['#block_content'];
    $suggestions[] = 'block__block_content__' . $entity->bundle();
  }
}
