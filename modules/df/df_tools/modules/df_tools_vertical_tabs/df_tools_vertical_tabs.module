<?php

/**
 * @file
 * Responsive version of vertical tabs
 */

/**
 * Implements hook_menu().
 */

function df_tools_vertical_tabs_menu() {
  $items = array();
  $items['admin/config/user-interface/responsive-vertical-tabs'] = array(
    'title' => 'Responsive Vertical Tabs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('df_tools_vertical_tabs_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to configure responsive vertical tabs.',
  );
  return $items;
}

/**
 * Administrative settings for the module add-ons.
 */
function df_tools_vertical_tabs_admin_form($form, $form_state) {
  // Checkbox to toggle the position of the vertical tabs culumn by setting and unsetting the right column css
  // TODO form alter node-form and block-admin-configure-form to put this configure option right on the page so that the toggle can be don in place!
  // TODO add the position of the column to the $user data as a per-user preference
  $form['vertical_tabs_toggle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Toggle Columns'),
    '#description' => t('When checked (and when the viewport is greater than 960px) vertical tabs will appear on the left.'),
    '#default_value' => variable_get('vertical_tabs_toggle', TRUE),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_js_alter().
 */
function df_tools_vertical_tabs_js_alter(&$javascript) {
  unset($javascript['misc/vertical-tabs.js']);
}

/**
 * Implements hook_css_alter().
 */
function df_tools_vertical_tabs_css_alter(&$css) {
  // Remove default vertical tabs css.
  unset($css['css/vertical-tabs.css']);

  // Swap css to move the column from left to right.
  if (variable_get('vertical_tabs_toggle') == TRUE) {
    // Remove right column CSS and fall back to the default (left).
    unset($css[drupal_get_path('module', 'df_tools_vertical_tabs') . '/css/vertical-tabs-right.css']);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function df_tools_vertical_tabs_module_implements_alter(&$implementations, $hook) {
  if (isset($implementations['df_tools_vertical_tabs'])) {
    $group = $implementations['df_tools_vertical_tabs'];
    unset($implementations['df_tools_vertical_tabs']);
    $implementations['df_tools_vertical_tabs'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function df_tools_vertical_tabs_form_node_form_alter(&$form, $state, $form_id) {
  $button_1 = array();
  $button_2 = array();

  // Pre-render all actions and move them to dropbuttons.
  foreach ($form['actions'] as $key => $action) {
    if ($action['#type'] == 'submit') {
      if ($key == 'preview' || $key == 'preview_changes') {
        $button_2[$key] = array(
          'title' => render($form['actions'][$key]),
          'html' => TRUE
        );
      }
      else {
        $button_1[$key] = array(
          'title' => render($form['actions'][$key]),
          'html' => TRUE
        );
      }
    }
  }

  // Hide the Workbench moderation dropdown.
  if (isset($form['options'])) {
    foreach (element_get_visible_children($form['options']) as $key) {
      if (isset($form['options'][$key]['#title']) && $form['options'][$key]['#title'] == 'Moderation state') {
        $form['options'][$key]['#access'] = FALSE;
      }
    }
  }

  // Close all vertical tabs by default.
  foreach (element_get_visible_children($form) as $key) {
    if (isset($form[$key]['#type']) && $form[$key]['#type'] == 'fieldset') {
      $form[$key]['#collapsed'] = TRUE;
    }
  }

  // Delete should always be last.
  if (isset($button_1['delete'])) {
    $temp = $button_1['delete'];
    unset($button_1['delete']);
    $button_1['delete'] = $temp;
  }

  // Add our dropbuttons to the form.
  $form['actions']['dropbutton'] = array(
    '#theme' => 'links__ctools_dropbutton',
    '#links' => $button_1
  );
  $form['actions']['dropbutton_2'] = array(
    '#theme' => 'links__ctools_dropbutton',
    '#links' => $button_2,
    '#class' => array('alternate')
  );
}
